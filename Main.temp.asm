INCLUDE c:\Users\madha\.vscode\extensions\istareatscreens.masm-runner-0.5.3\native\irvine\Irvine32.inc
; includelib winmm.lib
; PlaySoundA proto, pszSound:ptr byte, hmod:dword, fdwSound:dword

.data
;::::::::::::::::::::::::::::|Constants
COL dword 128                ;Maximum number of cols: 640/5 = 128 to maintain ratio
ROW dword 48                 ;Maximum number of rows: 480/5 = 96 to maintain ratio (96/2 = 48 since char height is 2)

;::::::::::::::::::::::::::::|Variables
;--------------------------- |Input Variables
playerName byte 32 dup(0)    ; Buffer to store player name (null-terminated)
nameLength byte 0            ; Current length of the name
maxNameLength byte 30        ; Maximum allowed name length
nameInputPrompt byte "Enter Your Name: ", 0
nameInputX byte 60           ; X coordinate for name input
nameInputY byte 25           ; Y coordinate for name input

;----------------------------|Output Variables
finalScoreMsg byte "'s Final Score: ", 0

;----------------------------|Sound Variables
beginningSound byte "pacman_beginning.wav", 0
deathSound byte "pacman_death.wav", 0
chompSound byte "pacman_chomp.wav", 0
eatFruitSound byte "pacman_eatfruit.wav", 0
eatGhostSound byte "pacman_eatghost.wav", 0

SND_FILENAME equ 00020000h
SND_ASYNC equ 00000001h

;----------------------------|Level Variable
currentLvl dword 1           ;Level counter to keep track of the current level

;----------------------------|Display Variables
scoreDisplayX byte 152       ;x coordinate of where score is displayed
scoreDisplayY byte 22        ;y coordinate of where score is displayed
livesDisplayX byte 152       ;x coordinate of where lives are displayed
livesDisplayY byte 35        ;y coordinate of where lives are displayed
foodDisplayX byte 152        ;x coordinate of where food is displayed
foodDisplayY byte 48         ;y coordinate of where food is displayed

heartStr3 byte "C C C", 0
heartStr2 byte "C C  ", 0
heartStr1 byte "C    ", 0
heartStr0 byte "     ", 0

foodValDisplayBuffer byte '____', 0

;----------------------------|Pac Man Variables
pX byte ?
pY byte ?
direction byte ?             ;1=UP, 2=DOWN, 3=LEFT, 4=RIGHT
pSpeed byte 1                ;Pacman speed
lives byte 3                 ;Number of lives
score dword 0                ;Score

;----------------------------|Ghost Variables
g1X byte ?
g1Y byte ?
g2X byte ?
g2Y byte ?
g3X byte ?
g3Y byte ?
g4X byte ?
g4Y byte ?
g5X byte ?
g5Y byte ?

ghostMoveCounter byte 0

;----------------------------|Level Wise Initial Positions
lvlPx dword 1, 1, 1
lvlPy dword 1, 1, 1

lvlG1x dword 59, 59, 59
lvlG1y dword 15, 15, 17

lvlG2x dword 61, 61, 61
lvlG2y dword 17, 17, 17

lvlG3x dword 63, 63, 63
lvlG3y dword 15, 15, 19

lvlG4x dword 65, 65, 65
lvlG4y dword 17, 17, 17

lvlG5x dword 67, 67, 67
lvlG5y dword 15, 15, 17

;----------------------------|Level Wise Food Count
lvlFC dword 13, 12, 1201

;::::::::::::::::::::::::::::|Game Name

gameName  byte "################################################################################################################################", 10
          byte "##                     #                                                                                #                     ##", 10
          byte "##                    #                                                                                  #                    ##", 10
          byte "######################                                                                                    ######################", 10
          byte "##                  #                                                                                      #                  ##", 10
          byte "##                 #                                                                                        #                 ##", 10
          byte "###################                                                                                          ###################", 10
          byte "##               #                                                                                            #               ##", 10
          byte "##              #                                                                                              #              ##", 10
          byte "################                                                                                                ################", 10
          byte "##            #                                                                                                  #            ##", 10
          byte "##           #                                                                                                    #           ##", 10
          byte "#############                                                                                                      #############", 10
          byte "##         #                                                                                                        #         ##", 10
          byte "##        #                                                                                                          #        ##", 10
          byte "##########                                                                                                            ##########", 10
          byte "##      #                                                                                                              #      ##", 10
          byte "################################################################################################################################", 10
          byte "##                                                                                                                            ##", 10
          byte "##     8 888888888o      .8.           ,o888888o.           ,8.       ,8.                   .8.          b.             8     ##", 10
          byte "##     8 8888    `88.   .888.         8888     `88.        ,888.     ,888.                 .888.         888o.          8     ##", 10
          byte "##     8 8888     `88  :88888.     ,8 8888       `8.      .`8888.   .`8888.               :88888.        Y88888o.       8     ##", 10
          byte "##     8 8888     ,88 . `88888.    88 8888               ,8.`8888. ,8.`8888.             . `88888.       .`Y888888o.    8     ##", 10
          byte "##     8 8888.   ,88'.8. `88888.   88 8888              ,8'8.`8888,8^8.`8888.           .8. `88888.      8o. `Y888888o. 8     ##", 10
          byte "##     8 888888888P'.8`8. `88888.  88 8888             ,8' `8.`8888' `8.`8888.         .8`8. `88888.     8`Y8o. `Y88888o8     ##", 10
          byte "##     8 8888      .8' `8. `88888. 88 8888            ,8'   `8.`88'   `8.`8888.       .8' `8. `88888.    8   `Y8o. `Y8888     ##", 10
          byte "##     8 8888     .8'   `8. `88888.`8 8888       .8' ,8'     `8.`'     `8.`8888.     .8'   `8. `88888.   8      `Y8o. `Y8     ##", 10
          byte "##     8 8888    .888888888. `88888.  8888     ,88' ,8'       `8        `8.`8888.   .888888888. `88888.  8         `Y8o.`     ##", 10
          byte "##     8 8888   .8'       `8. `88888.  `8888888P'  ,8'         `         `8.`8888. .8'       `8. `88888. 8            `Yo     ##", 10
          byte "##                                                                                                                            ##", 10
          byte "################################################################################################################################", 10
          byte "##      #                                                                                                              #      ##", 10
          byte "##########                                                                                                            ##########", 10
          byte "##        #                                                                                                          #        ##", 10
          byte "##         #                                                                                                        #         ##", 10
          byte "#############                                                                                                      #############", 10
          byte "##           #                                                                                                    #           ##", 10
          byte "##            #                                                                                                  #            ##", 10
          byte "################                                                                                                ################", 10
          byte "##              #                                                                                              #              ##", 10
          byte "##               #                                                                                            #               ##", 10
          byte "###################                                                                                          ###################", 10
          byte "##                 #                                                                                        #                 ##", 10
          byte "##                  #                                                                                      #                  ##", 10
          byte "######################                                                                                    ######################", 10
          byte "##                    #                                                                                  #                    ##", 10
          byte "##                     #                                                                                #                     ##", 10
          byte "################################################################################################################################", 0

;::::::::::::::::::::::::::::|Game Menu
                                                
gameMenu  byte "##################################################################################################################################", 10
          byte "##                                                                                                                              ##", 10
          byte "##      8 888888888o      .8.           ,o888888o.           ,8.       ,8.                   .8.          b.             8      ##", 10
          byte "##      8 8888    `88.   .888.         8888     `88.        ,888.     ,888.                 .888.         888o.          8      ##", 10
          byte "##      8 8888     `88  :88888.     ,8 8888       `8.      .`8888.   .`8888.               :88888.        Y88888o.       8      ##", 10
          byte "##      8 8888     ,88 . `88888.    88 8888               ,8.`8888. ,8.`8888.             . `88888.       .`Y888888o.    8      ##", 10
          byte "##      8 8888.   ,88'.8. `88888.   88 8888              ,8'8.`8888,8^8.`8888.           .8. `88888.      8o. `Y888888o. 8      ##", 10
          byte "##      8 888888888P'.8`8. `88888.  88 8888             ,8' `8.`8888' `8.`8888.         .8`8. `88888.     8`Y8o. `Y88888o8      ##", 10
          byte "##      8 8888      .8' `8. `88888. 88 8888            ,8'   `8.`88'   `8.`8888.       .8' `8. `88888.    8   `Y8o. `Y8888      ##", 10
          byte "##      8 8888     .8'   `8. `88888.`8 8888       .8' ,8'     `8.`'     `8.`8888.     .8'   `8. `88888.   8      `Y8o. `Y8      ##", 10
          byte "##      8 8888    .888888888. `88888.  8888     ,88' ,8'       `8        `8.`8888.   .888888888. `88888.  8         `Y8o.`      ##", 10
          byte "##      8 8888   .8'       `8. `88888.  `8888888P'  ,8'         `         `8.`8888. .8'       `8. `88888. 8            `Yo      ##", 10
          byte "##                                                                                                                              ##", 10
          byte "##################################################################################################################################", 10
          byte "##                                                                                                                              ##", 10
          byte "##                                               ____    _                    _                                                 ##", 10
          byte "##                                      ___     / ___|  | |_    __ _   _ __  | |_                                               ##", 10
          byte "##                                     / _ \    \___ \  | __|  / _` | | '__| | __|                                              ##", 10
          byte "##                                    | (1) |    ___) | | |_  | (_| | | |    | |_                                               ##", 10
          byte "##                                     \___/    |____/   \__|  \__,_| |_|     \__|                                              ##", 10
          byte "##                                                                                                                              ##", 10
          byte "##                                                ____           _       _                                                      ##", 10
          byte "##                                      ___      / ___|  _   _  (_)   __| |   ___                                               ##", 10
          byte "##                                     / _ \    | |  _  | | | | | |  / _` |  / _ \                                              ##", 10
          byte "##                                    | (2) |   | |_| | | |_| | | | | (_| | |  __/                                              ##", 10
          byte "##                                     \___/     \____|  \__,_| |_|  \__,_|  \___|                                              ##", 10
          byte "##                                                                                                                              ##", 10
          byte "##                                               ____           _                                                               ##", 10
          byte "##                                      ___     / ___|    ___  | |_   _   _   _ __                                              ##", 10
          byte "##                                     / _ \    \___ \   / _ \ | __| | | | | | '_ \                                             ##", 10
          byte "##                                    | (3) |    ___) | |  __/ | |_  | |_| | | |_) |                                            ##", 10
          byte "##                                     \___/    |____/   \___|  \__|  \__,_| | .__/                                             ##", 10
          byte "##                                                                           |_|                                                ##", 10
          byte "##                                               _   _   _         _                                                            ##", 10
          byte "##                                      ___     | | | | (_)  ___  | |_    ___    _ __   _   _                                   ##", 10
          byte "##                                     / _ \    | |_| | | | / __| | __|  / _ \  | '__| | | | |                                  ##", 10
          byte "##                                    | (4) |   |  _  | | | \__ \ | |_  | (_) | | |    | |_| |                                  ##", 10
          byte "##                                     \___/    |_| |_| |_| |___/  \__|  \___/  |_|     \__, |                                  ##", 10
          byte "##                                                                                      |___/                                   ##", 10
          byte "##                                                ___            _   _                                                          ##", 10
          byte "##                                      ___      / _ \   _   _  (_) | |_                                                        ##", 10
          byte "##                                     / _ \    | | | | | | | | | | | __|                                                       ##", 10
          byte "##                                    | (5) |   | |_| | | |_| | | | | |_                                                        ##", 10
          byte "##                                     \___/     \__\_\  \__,_| |_|  \__|                                                       ##", 10
          byte "##                                                                                                                              ##", 10
          byte "##                                                                                                                              ##", 10
          byte "##################################################################################################################################", 0

;::::::::::::::::::::::::::::|Game Instructions

gameInst  byte "##################################################################################################################################", 10
          byte "##                                                                                                                              ##", 10
          byte "##      8 888888888o      .8.           ,o888888o.           ,8.       ,8.                   .8.          b.             8      ##", 10
          byte "##      8 8888    `88.   .888.         8888     `88.        ,888.     ,888.                 .888.         888o.          8      ##", 10
          byte "##      8 8888     `88  :88888.     ,8 8888       `8.      .`8888.   .`8888.               :88888.        Y88888o.       8      ##", 10
          byte "##      8 8888     ,88 . `88888.    88 8888               ,8.`8888. ,8.`8888.             . `88888.       .`Y888888o.    8      ##", 10
          byte "##      8 8888.   ,88'.8. `88888.   88 8888              ,8'8.`8888,8^8.`8888.           .8. `88888.      8o. `Y888888o. 8      ##", 10
          byte "##      8 888888888P'.8`8. `88888.  88 8888             ,8' `8.`8888' `8.`8888.         .8`8. `88888.     8`Y8o. `Y88888o8      ##", 10
          byte "##      8 8888      .8' `8. `88888. 88 8888            ,8'   `8.`88'   `8.`8888.       .8' `8. `88888.    8   `Y8o. `Y8888      ##", 10
          byte "##      8 8888     .8'   `8. `88888.`8 8888       .8' ,8'     `8.`'     `8.`8888.     .8'   `8. `88888.   8      `Y8o. `Y8      ##", 10
          byte "##      8 8888    .888888888. `88888.  8888     ,88' ,8'       `8        `8.`8888.   .888888888. `88888.  8         `Y8o.`      ##", 10
          byte "##      8 8888   .8'       `8. `88888.  `8888888P'  ,8'         `         `8.`8888. .8'       `8. `88888. 8            `Yo      ##", 10
          byte "##                                                                                                                              ##", 10
          byte "##################################################################################################################################", 10
          byte "##                        _____        _     _____                  _  __   __                                                  ##", 10
          byte "##                 ___   | ____| __ _ | |_  |  ___|___    ___    __| | \ \ / /_   _  _ __ ___   _ __ ___   _   _                ##", 10
          byte "##                / _ \  |  _|  / _` || __| | |_  / _ \  / _ \  / _` |  \ V /| | | || '_ ` _ \ | '_ ` _ \ | | | |               ##", 10
          byte "##               | (_) | | |___| (_| || |_  |  _|| (_) || (_) || (_| |   | | | |_| || | | | | || | | | | || |_| |               ##", 10
          byte "##                \___/  |_____|\__,_| \__| |_|   \___/  \___/  \__,_|   |_|  \__,_||_| |_| |_||_| |_| |_| \__, |               ##", 10
          byte "##                        ____                _  _     ____          _____                  _              |___/                ##", 10
          byte "##                 ___   |  _ \   ___   _ __ ( )| |_  | __ )   ___  |  ___|___    ___    __| |                                  ##", 10
          byte "##                / _ \  | | | | / _ \ | '_ \|/ | __| |  _ \  / _ \ | |_  / _ \  / _ \  / _` |                                  ##", 10
          byte "##               | (_) | | |_| || (_) || | | |  | |_  | |_) ||  __/ |  _|| (_) || (_) || (_| |                                  ##", 10
          byte "##                \___/  |____/  \___/ |_| |_|   \__| |____/  \___| |_|   \___/  \___/  \__,_|                                  ##", 10
          byte "##                       __        __      _  _   ___        _   _          _   _                                               ##", 10
          byte "##                 ___   \ \      / /__ _ | || | |_ _| ___  | \ | |  ___   | \ | |  ___                                         ##", 10
          byte "##                / _ \   \ \ /\ / // _` || || |  | | / __| |  \| | / _ \  |  \| | / _ \                                        ##", 10
          byte "##               | (_) |   \ V  V /| (_| || || |  | | \__ \ | |\  || (_) | | |\  || (_) |                                       ##", 10
          byte "##                \___/     \_/\_/  \__,_||_||_| |___||___/ |_| \_| \___/  |_| \_| \___/                                        ##", 10
          byte "##                         ____  _                  _     ___        ____   _          _   _          _   _                     ##", 10
          byte "##                 ___    / ___|| |__    ___   ___ | |_  |_ _| ___  | __ ) (_)  __ _  | \ | |  ___   | \ | |  ___               ##", 10
          byte "##                / _ \  | |  _ | '_ \  / _ \ / __|| __|  | | / __| |  _ \ | | / _` | |  \| | / _ \  |  \| | / _ \              ##", 10
          byte "##               | (_) | | |_| || | | || (_) |\__ \| |_   | | \__ \ | |_) || || (_| | | |\  || (_) | | |\  || (_) |             ##", 10
          byte "##                \___/   \____||_| |_| \___/ |___/ \__| |___||___/ |____/ |_| \__, | |_| \_| \___/  |_| \_| \___/              ##", 10
          byte "##                                                                             |___/                                            ##", 10
          byte "##                       __   __              _  __                         _   _                   _____                       ##", 10
          byte "##                 ___   \ \ / /___   _   _  | |/ / _ __    ___ __      __ | | | |  ___ __      __ |_   _|___                   ##", 10
          byte "##                / _ \   \ V // _ \ | | | | | ' / | '_ \  / _ \\ \ /\ / / | |_| | / _ \\ \ /\ / /   | | / _ \                  ##", 10
          byte "##               | (_) |   | || (_) || |_| | | . \ | | | || (_) |\ V  V /  |  _  || (_) |\ V  V /    | || (_) |                 ##", 10
          byte "##                \___/    |_| \___/  \__,_| |_|\_\|_| |_| \___/  \_/\_/   |_| |_| \___/  \_/\_/     |_| \___/                  ##", 10
          byte "##                        ____                     _    _       ____   _         _      _   ___                                 ##", 10
          byte "##                       | __ )  _ __  ___   __ _ | |_ | |__   |  _ \ (_)  __ _ | |__  | |_|__ \                                ##", 10
          byte "##                       |  _ \ | '__|/ _ \ / _` || __|| '_ \  | |_) || | / _` || '_ \ | __| / /                                ##", 10
          byte "##                       | |_) || |  |  __/| (_| || |_ | | | | |  _ < | || (_| || | | || |_ |_|                                 ##", 10
          byte "##                       |____/ |_|   \___| \__,_| \__||_| |_| |_| \_\|_| \__, ||_| |_| \__|(_)                                 ##", 10
          byte "##                                                                        |___/                                                 ##", 10
          byte "##################################################################################################################################", 0

;::::::::::::::::::::::::::::|Game Setup

gameSetup byte "##################################################################################################################################", 10
          byte "##                                                                                                                              ##", 10
          byte "##      8 888888888o      .8.           ,o888888o.           ,8.       ,8.                   .8.          b.             8      ##", 10
          byte "##      8 8888    `88.   .888.         8888     `88.        ,888.     ,888.                 .888.         888o.          8      ##", 10
          byte "##      8 8888     `88  :88888.     ,8 8888       `8.      .`8888.   .`8888.               :88888.        Y88888o.       8      ##", 10
          byte "##      8 8888     ,88 . `88888.    88 8888               ,8.`8888. ,8.`8888.             . `88888.       .`Y888888o.    8      ##", 10
          byte "##      8 8888.   ,88'.8. `88888.   88 8888              ,8'8.`8888,8^8.`8888.           .8. `88888.      8o. `Y888888o. 8      ##", 10
          byte "##      8 888888888P'.8`8. `88888.  88 8888             ,8' `8.`8888' `8.`8888.         .8`8. `88888.     8`Y8o. `Y88888o8      ##", 10
          byte "##      8 8888      .8' `8. `88888. 88 8888            ,8'   `8.`88'   `8.`8888.       .8' `8. `88888.    8   `Y8o. `Y8888      ##", 10
          byte "##      8 8888     .8'   `8. `88888.`8 8888       .8' ,8'     `8.`'     `8.`8888.     .8'   `8. `88888.   8      `Y8o. `Y8      ##", 10
          byte "##      8 8888    .888888888. `88888.  8888     ,88' ,8'       `8        `8.`8888.   .888888888. `88888.  8         `Y8o.`      ##", 10
          byte "##      8 8888   .8'       `8. `88888.  `8888888P'  ,8'         `         `8.`8888. .8'       `8. `88888. 8            `Yo      ##", 10
          byte "##                                                                                                                              ##", 10
          byte "##################################################################################################################################", 10
          byte "##                                                                                                                              ##", 10
          byte "##                                                                                                                              ##", 10
          byte "##                                                                                                                              ##", 10
          byte "##                             ____         _                   _____                                                           ##", 10
          byte "##                      ___   / ___|   ___ | |_  _   _  _ __   |  ___|___   _ __      __ _  ___  _ __ ___                       ##", 10
          byte "##                     / _ \  \___ \  / _ \| __|| | | || '_ \  | |_  / _ \ | '__|    / _` |/ __|| '_ ` _ \                      ##", 10
          byte "##                    | (_) |  ___) ||  __/| |_ | |_| || |_) | |  _|| (_) || |     _| (_| |\__ \| | | | | |                     ##", 10
          byte "##                     \___/  |____/  \___| \__| \__,_|| .__/  |_|   \___/ |_|    (_)\__,_||___/|_| |_| |_|                     ##", 10
          byte "##                                                     |_|                                                                      ##", 10
          byte "##                             _   _                         _     _  _   _____  _  _                                           ##", 10
          byte "##                      ___   | | | |  __ _ __   __ ___     / \   | || | |  ___|(_)| |  ___  ___                                ##", 10
          byte "##                     / _ \  | |_| | / _` |\ \ / // _ \   / _ \  | || | | |_   | || | / _ \/ __|                               ##", 10
          byte "##                    | (_) | |  _  || (_| | \ V /|  __/  / ___ \ | || | |  _|  | || ||  __/\__ \                               ##", 10
          byte "##                     \___/  |_| |_| \__,_|  \_/  \___| /_/   \_\|_||_| |_|    |_||_| \___||___/                               ##", 10
          byte "##                                                                                                                              ##", 10
          byte "##                             ____                         ____                                                                ##", 10
          byte "##                      ___   |  _ \  _ __  ___  ___  ___  |  _ \  _   _  _ __                                                  ##", 10
          byte "##                     / _ \  | |_) || '__|/ _ \/ __|/ __| | |_) || | | || '_ \                                                 ##", 10
          byte "##                    | (_) | |  __/ | |  |  __/\__ \\__ \ |  _ < | |_| || | | |                                                ##", 10
          byte "##                     \___/  |_|    |_|   \___||___/|___/ |_| \_\ \__,_||_| |_|                                                ##", 10
          byte "##                                                                                                                              ##", 10
          byte "##                             _____          _                _                                                                ##", 10
          byte "##                      ___   | ____| _ __   (_)  ___   _   _ | |                                                               ##", 10
          byte "##                     / _ \  |  _|  | '_ \  | | / _ \ | | | || |                                                               ##", 10
          byte "##                    | (_) | | |___ | | | | | || (_) || |_| ||_|                                                               ##", 10
          byte "##                     \___/  |_____||_| |_|_/ | \___/  \__, |(_)                                                               ##", 10
          byte "##                                         |__/         |___/                                                                   ##", 10
          byte "##                                                                                                                              ##", 10
          byte "##                                                                                                                              ##", 10
          byte "##                                                                                                                              ##", 10
          byte "##                                                                                                                              ##", 10
          byte "##                                                                                                                              ##", 10
          byte "##################################################################################################################################", 0

;::::::::::::::::::::::::::::|Level                           

lvl1      byte "#########################################################################################################################################################################", 10
          byte "##                                                                                                                              ##                                     ##", 10
          byte "##      8 888888888o      .8.           ,o888888o.           ,8.       ,8.                   .8.          b.             8      ##               8 88888               ##", 10
          byte "##      8 8888    `88.   .888.         8888     `88.        ,888.     ,888.                 .888.         888o.          8      ##               8 88888               ##", 10
          byte "##      8 8888     `88  :88888.     ,8 8888       `8.      .`8888.   .`8888.               :88888.        Y88888o.       8      ##               8 88888               ##", 10
          byte "##      8 8888     ,88 . `88888.    88 8888               ,8.`8888. ,8.`8888.             . `88888.       .`Y888888o.    8      ##               8 88888               ##", 10
          byte "##      8 8888.   ,88'.8. `88888.   88 8888              ,8'8.`8888,8^8.`8888.           .8. `88888.      8o. `Y888888o. 8      ##               8 88888               ##", 10
          byte "##      8 888888888P'.8`8. `88888.  88 8888             ,8' `8.`8888' `8.`8888.         .8`8. `88888.     8`Y8o. `Y88888o8      ##               8 88888               ##", 10
          byte "##      8 8888      .8' `8. `88888. 88 8888            ,8'   `8.`88'   `8.`8888.       .8' `8. `88888.    8   `Y8o. `Y8888      ##               8 88888               ##", 10
          byte "##      8 8888     .8'   `8. `88888.`8 8888       .8' ,8'     `8.`'     `8.`8888.     .8'   `8. `88888.   8      `Y8o. `Y8      ##               8 88888               ##", 10
          byte "##      8 8888    .888888888. `88888.  8888     ,88' ,8'       `8        `8.`8888.   .888888888. `88888.  8         `Y8o.`      ##               8 88888               ##", 10
          byte "##      8 8888   .8'       `8. `88888.  `8888888P'  ,8'         `         `8.`8888. .8'       `8. `88888. 8            `Yo      ##               8 88888               ##", 10
          byte "##                                                                                                                              ##                                     ##", 10
          byte "#########################################################################################################################################################################", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ##   ____                              ##", 10
          byte "##                                                                                                                              ##  / ___|   ___  ___   _ __  ___      ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ##  \___ \  / __|/ _ \ | '__|/ _ \     ##", 10
          byte "##                                                                                                                              ##   ___) || (__| (_) || |  |  __/     ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ##  |____/  \___|\___/ |_|   \___|     ##", 10
          byte "##                                                                                                                              ##                                     ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ##                _________________    ##", 10
          byte "##                                                                                                                              ##               / _______________ \   ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .######## . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ##              | (_______________) |  ##", 10
          byte "##                                                           ##    ##                                                           ##               \_________________/   ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .##    ## . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ##                                     ##", 10
          byte "##                                                           ##    ##                                                           ##                                     ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .######## . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ##                                     ##", 10
          byte "##                                                                                                                              ##   _      _                          ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ##  | |    (_)__   __ ___  ___         ##", 10
          byte "##                                                                                                                              ##  | |    | |\ \ / // _ \/ __|        ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ##  | |___ | | \ V /|  __/\__ \        ##", 10
          byte "##                                                                                                                              ##  |_____||_|  \_/  \___||___/        ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ##                                     ##", 10
          byte "##                                                                                                                              ##                _________________    ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . ########. . . . . . . . . . . . . . . . . ########. . . . . . . . . . . . . . . . . . . ##               / _______________ \   ##", 10
          byte "##                                      ##    ##                                  ##    ##                                      ##              | (_______________) |  ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . ##    ##. . . . . . . . . . . . . . . . . ##    ##. . . . . . . . . . . . . . . . . . . ##               \_________________/   ##", 10
          byte "##                                      ##    ##                                  ##    ##                                      ##                                     ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . ########. . . . . . . . . . . . . . . . . ########. . . . . . . . . . . . . . . . . . . ##                                     ##", 10
          byte "##                                                                                                                              ##                                     ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ##   _____                  _          ##", 10
          byte "##                                                                                                                              ##  |  ___|___    ___    __| |         ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ##  | |_  / _ \  / _ \  / _` |         ##", 10
          byte "##                                                                                                                              ##  |  _|| (_) || (_) || (_| |         ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ##  |_|   \___/  \___/  \__,_|         ##", 10
          byte "##                                                                                                                              ##                                     ##", 10
          byte "##. . . . . .######## . . . .######## . . . .######## . . . .######## . . . .######## . . . .######## . . . .######## . . . . . ##                _________________    ##", 10
          byte "##           ##    ##        ##    ##        ##    ##        ##    ##        ##    ##        ##    ##        ##    ##           ##               / _______________ \   ##", 10
          byte "##. . . . . .##    ## . . . .##    ## . . . .##    ## . . . .##    ## . . . .##    ## . . . .##    ## . . . .##    ## . . . . . ##              | (_______________) |  ##", 10
          byte "##           ##    ##        ##    ##        ##    ##        ##    ##        ##    ##        ##    ##        ##    ##           ##               \_________________/   ##", 10
          byte "##. . . . . .######## . . . .######## . . . .######## . . . .######## . . . .######## . . . .######## . . . .######## . . . . . ##                                     ##", 10
          byte "##                                                                                                                              #########################################", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ##                                     ##", 10
          byte "##                                                                                                                              ##        _____________________        ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ##      /  ___________________  \      ##", 10
          byte "##                                                                                                                              ##     / / _____  ____    ____ \ \     ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ##    | | | ____|/ ___|  / ___| | |    ##", 10
          byte "##                                                                                                                              ##    | | |  _|  \___ \ | |     | |    ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ##    | | | |___  ___) || |___  | |    ##", 10
          byte "##                                                                                                                              ##    | | |_____||____/  \____| | |    ##", 10
          byte "#########################################################################################################################################################################", 0

;::::::::::::::::::::::::::::|Level 2

lvl2      byte "#########################################################################################################################################################################", 10
          byte "##                                                                                                                              ##                                     ##", 10
          byte "##      8 888888888o      .8.           ,o888888o.           ,8.       ,8.                   .8.          b.             8      ##          8 88888   8 88888          ##", 10
          byte "##      8 8888    `88.   .888.         8888     `88.        ,888.     ,888.                 .888.         888o.          8      ##          8 88888   8 88888          ##", 10
          byte "##      8 8888     `88  :88888.     ,8 8888       `8.      .`8888.   .`8888.               :88888.        Y88888o.       8      ##          8 88888   8 88888          ##", 10
          byte "##      8 8888     ,88 . `88888.    88 8888               ,8.`8888. ,8.`8888.             . `88888.       .`Y888888o.    8      ##          8 88888   8 88888          ##", 10
          byte "##      8 8888.   ,88'.8. `88888.   88 8888              ,8'8.`8888,8^8.`8888.           .8. `88888.      8o. `Y888888o. 8      ##          8 88888   8 88888          ##", 10
          byte "##      8 888888888P'.8`8. `88888.  88 8888             ,8' `8.`8888' `8.`8888.         .8`8. `88888.     8`Y8o. `Y88888o8      ##          8 88888   8 88888          ##", 10
          byte "##      8 8888      .8' `8. `88888. 88 8888            ,8'   `8.`88'   `8.`8888.       .8' `8. `88888.    8   `Y8o. `Y8888      ##          8 88888   8 88888          ##", 10
          byte "##      8 8888     .8'   `8. `88888.`8 8888       .8' ,8'     `8.`'     `8.`8888.     .8'   `8. `88888.   8      `Y8o. `Y8      ##          8 88888   8 88888          ##", 10
          byte "##      8 8888    .888888888. `88888.  8888     ,88' ,8'       `8        `8.`8888.   .888888888. `88888.  8         `Y8o.`      ##          8 88888   8 88888          ##", 10
          byte "##      8 8888   .8'       `8. `88888.  `8888888P'  ,8'         `         `8.`8888. .8'       `8. `88888. 8            `Yo      ##          8 88888   8 88888          ##", 10
          byte "##                                                                                                                              ##                                     ##", 10
          byte "#########################################################################################################################################################################", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ##   ____                              ##", 10
          byte "##                                                                                                                              ##  / ___|   ___  ___   _ __  ___      ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ######. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ##  \___ \  / __|/ _ \ | '__|/ _ \     ##", 10
          byte "##                                                           ##    ##                                                           ##   ___) || (__| (_) || |  |  __/     ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . . . . ##. . . ##. . . . . . . . . . . . . . . . . . . . . . . . . . . . . ##  |____/  \___|\___/ |_|   \___|     ##", 10
          byte "##                                                       ###          ###                                                       ##                                     ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ##                _________________    ##", 10
          byte "##                                                                                                                              ##               / _______________ \   ##", 10
          byte "##. . . . . . . . . . . . . . . . . ####### . . . . . . . . .######## . . . . . . . . .#######. . . . . . . . . . . . . . . . . ##              | (_______________) |  ##", 10
          byte "##                                       ##                  ##    ##                  ##                                       ##               \_________________/   ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . .## . . . . . . . . .##    ## . . . . . . . . .## . . . . . . . . . . . . . . . . . . . ##                                     ##", 10
          byte "##                                       ##                  ##    ##                  ##                                       ##                                     ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . .###### . . . . . . .######## . . . . . . .###### . . . . . . . . . . . . . . . . . . . ##                                     ##", 10
          byte "##                                                                                                                              ##   _      _                          ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . .## . . . . . . . .## . . . . . . . . . . . . . . . . . . . . . . . . . . ##  | |    (_)__   __ ___  ___         ##", 10
          byte "##                                                     ##                ##                                                     ##  | |    | |\ \ / // _ \/ __|        ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . .## . . . . . . . .## . . . . . . . . . . . . . . . . . . . . . . . . . . ##  | |___ | | \ V /|  __/\__ \        ##", 10
          byte "##                                                     ##                ##                                                     ##  |_____||_|  \_/  \___||___/        ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . .###### . . . . . . . .###### . . . . . . . . . . . . . . . . . . . . . . . . ##                                     ##", 10
          byte "##                                                                                                                              ##                _________________    ##", 10
          byte "##. . . . . . . . . . . .#######. . . . ########. . . . . . .######## . . . . . . ########. . . . ####### . . . . . . . . . . . ##               / _______________ \   ##", 10
          byte "##                            ##        ##    ##             ##    ##             ##    ##        ##                            ##              | (_______________) |  ##", 10
          byte "##. . . . . . . . . . . . . . ##. . . . ##    ##. . . . . . .##    ## . . . . . . ##    ##. . . . ##. . . . . . . . . . . . . . ##               \_________________/   ##", 10
          byte "##                            ##        ##    ##             ##    ##             ##    ##        ##                            ##                                     ##", 10
          byte "##. . . . . . . . . . . . . . ######. . ########. . . . . . .######## . . . . . . ########. . ######. . . . . . . . . . . . . . ##                                     ##", 10
          byte "##                                                                                                                              ##                                     ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . ##. . . . . . . . . . . . . ##. . . . . . . . . . . . . . . . . . . . . . . . ##   _____                  _          ##", 10
          byte "##                                                ##                          ##                                                ##  |  ___|___    ___    __| |         ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . ##. . . . . . . . . . . . . ##. . . . . . . . . . . . . . . . . . . . . . . . ##  | |_  / _ \  / _ \  / _` |         ##", 10
          byte "##                                                ##                          ##                                                ##  |  _|| (_) || (_) || (_| |         ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . ######. . . . ##########. . . . ######. . . . . . . . . . . . . . . . . . . . . . ##  |_|   \___/  \___/  \__,_|         ##", 10
          byte "##                                                                                                                              ##                                     ##", 10
          byte "##. . . . . .######## . . . .######## . . . .######## . . . .######## . . . .######## . . . .######## . . . .######## . . . . . ##                _________________    ##", 10
          byte "##           ##    ##        ##    ##        ##    ##        ##    ##        ##    ##        ##    ##        ##    ##           ##               / _______________ \   ##", 10
          byte "##. . . . . .##    ## . . . .##    ## . . . .##    ## . . . .##    ## . . . .##    ## . . . .##    ## . . . .##    ## . . . . . ##              | (_______________) |  ##", 10
          byte "##           ##    ##        ##    ##        ##    ##        ##    ##        ##    ##        ##    ##        ##    ##           ##               \_________________/   ##", 10
          byte "##. . . . . .######## . . . .######## . . . .######## . . . .######## . . . .######## . . . .######## . . . .######## . . . . . ##                                     ##", 10
          byte "##                                                                                                                              #########################################", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ##                                     ##", 10
          byte "##            #######                        ##                                    ##                        #######            ##        _____________________        ##", 10
          byte "##. . . . . . . . .## . . . . . . . . . . . .## . . . . . . . . . . . . . . . . . .## . . . . . . . . . . . .## . . . . . . . . ##      /  ___________________  \      ##", 10
          byte "##                 ##                        ##                                    ##                        ##                 ##     / / _____  ____    ____ \ \     ##", 10
          byte "##. . . . . . . . .## . . . . . . . . . . . .## . . . . . . . . . . . . . . . . . .## . . . . . . . . . . . .## . . . . . . . . ##    | | | ____|/ ___|  / ___| | |    ##", 10
          byte "##                 ######                ######        ####################        ######                ######                 ##    | | |  _|  \___ \ | |     | |    ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ##    | | | |___  ___) || |___  | |    ##", 10
          byte "##                                                                                                                              ##    | | |_____||____/  \____| | |    ##", 10
          byte "#########################################################################################################################################################################", 0 

;::::::::::::::::::::::::::::|Level 3
                        
lvl3      byte "#########################################################################################################################################################################", 10
          byte "##                                                                                                                              ##                                     ##", 10
          byte "##      8 888888888o      .8.           ,o888888o.           ,8.       ,8.                   .8.          b.             8      ##     8 88888   8 88888   8 88888     ##", 10
          byte "##      8 8888    `88.   .888.         8888     `88.        ,888.     ,888.                 .888.         888o.          8      ##     8 88888   8 88888   8 88888     ##", 10
          byte "##      8 8888     `88  :88888.     ,8 8888       `8.      .`8888.   .`8888.               :88888.        Y88888o.       8      ##     8 88888   8 88888   8 88888     ##", 10
          byte "##      8 8888     ,88 . `88888.    88 8888               ,8.`8888. ,8.`8888.             . `88888.       .`Y888888o.    8      ##     8 88888   8 88888   8 88888     ##", 10
          byte "##      8 8888.   ,88'.8. `88888.   88 8888              ,8'8.`8888,8^8.`8888.           .8. `88888.      8o. `Y888888o. 8      ##     8 88888   8 88888   8 88888     ##", 10
          byte "##      8 888888888P'.8`8. `88888.  88 8888             ,8' `8.`8888' `8.`8888.         .8`8. `88888.     8`Y8o. `Y88888o8      ##     8 88888   8 88888   8 88888     ##", 10
          byte "##      8 8888      .8' `8. `88888. 88 8888            ,8'   `8.`88'   `8.`8888.       .8' `8. `88888.    8   `Y8o. `Y8888      ##     8 88888   8 88888   8 88888     ##", 10
          byte "##      8 8888     .8'   `8. `88888.`8 8888       .8' ,8'     `8.`'     `8.`8888.     .8'   `8. `88888.   8      `Y8o. `Y8      ##     8 88888   8 88888   8 88888     ##", 10
          byte "##      8 8888    .888888888. `88888.  8888     ,88' ,8'       `8        `8.`8888.   .888888888. `88888.  8         `Y8o.`      ##     8 88888   8 88888   8 88888     ##", 10
          byte "##      8 8888   .8'       `8. `88888.  `8888888P'  ,8'         `         `8.`8888. .8'       `8. `88888. 8            `Yo      ##     8 88888   8 88888   8 88888     ##", 10
          byte "##                                                                                                                              ##                                     ##", 10
          byte "#########################################################################################################################################################################", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ##   ____                              ##", 10
          byte "##                                                                                                                              ##  / ___|   ___  ___   _ __  ___      ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ######. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ##  \___ \  / __|/ _ \ | '__|/ _ \     ##", 10
          byte "##                                                           ##    ##                                                           ##   ___) || (__| (_) || |  |  __/     ##", 10
          byte "##. . O . . . . . . . . . . . . . . . . . . . . . . . . . . ##. @ . ##. . . . . . . . . . . . . . . . . . . . . . . . . . O . . ##  |____/  \___|\___/ |_|   \___|     ##", 10
          byte "##                                                       ####        ####                                                       ##                                     ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . . ##. . . . . . . ##. . . . . . . . . . . . . . . . . . . . . . . . . . . ##                _________________    ##", 10
          byte "##                                                      ##              ##                                                      ##               / _______________ \   ##", 10
          byte "##. . . . . . . . . . . . . . . . .######## . . . . . . . . .######## . . . . . . . . .######## . . . . . . . . . . . . . . . . ##              | (_______________) |  ##", 10
          byte "##                                ##     ##                  ##    ##                  ##     ##                                ##               \_________________/   ##", 10
          byte "##. . . . . . . . . . . . . . . .## . @ .## . . . . . . . . .##    ## . . . . . . . . .## . @ .## . . . . . . . . . . . . . . . ##                                     ##", 10
          byte "##                              ##       ##                  ##    ##                  ##       ##                              ##                                     ##", 10
          byte "##. . . . . . . . . . . . . . .## . . . .###### . . . . . . .######## . . . . . . .###### . . . .## . . . . . . . . . . . . . . ##                                     ##", 10
          byte "##                            ##                                                                  ##                            ##   _      _                          ##", 10
          byte "##. . . . . . . . . . . . . . ##. . . . . . . . . . . .######## . .######## . . . . . . . . . . . ##. . . . . . . . . . . . . . ##  | |    (_)__   __ ___  ___         ##", 10
          byte "##                            ##                       ##     ##  ##     ##                       ##                            ##  | |    | |\ \ / // _ \/ __|        ##", 10
          byte "##. . . . . . . . . . . . . . ##. . . . . . . . . . . .## . . .#### . . .## . . . . . . . . . . . ##. . . . . . . . . . . . . . ##  | |___ | | \ V /|  __/\__ \        ##", 10
          byte "##                            ##                       ##       ##       ##                       ##                            ##  |_____||_|  \_/  \___||___/        ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . .###### . . . . . . . .###### . . . . . . . . . . . . . . . . . . . . . . . . ##                                     ##", 10
          byte "##                                                                                                                              ##                _________________    ##", 10
          byte "##. . . . . . . . . . . ########. . . . ########. . . . . . .######## . . . . . . ########. . . . ########. . . . . . . . . . . ##               / _______________ \   ##", 10
          byte "##                     ##     ##        ##    ##             ##    ##             ##    ##        ##     ##                     ##              | (_______________) |  ##", 10
          byte "##. . . . . . . . . . ##. @ . ##. . . . ##    ##. . . . . . .##    ## . . . . . . ##    ##. . . . ##. @ . ##. . . . . . . . . . ##               \_________________/   ##", 10
          byte "##                   ##       ##        ##    ##             ##    ##             ##    ##        ##       ##                   ##                                     ##", 10
          byte "##. . . . . . . . . ##. . . . ######. . ########. . . . . . .######## . . . . . . ########. . ######. . . . ##. . . . . . . . . ##                                     ##", 10
          byte "##                 ##                                                                                        ##                 ##                                     ##", 10
          byte "##. . . . . . . . .## . . . . . . . . . . . . . . ########. . . . . . . ########. . . . . . . . . . . . . . .## . . . . . . . . ##   _____                  _          ##", 10
          byte "##                 ##                             ##     ##            ##     ##                             ##                 ##  |  ___|___    ___    __| |         ##", 10
          byte "##. . . . . . . . .## . . . . . . . . . . . . . . ##. @ . ##. . . . . ##. @ . ##. . . . . . . . . . . . . . .## . . . . . . . . ##  | |_  / _ \  / _ \  / _` |         ##", 10
          byte "##                 ##                             ##       ##        ##       ##                             ##                 ##  |  _|| (_) || (_) || (_| |         ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . ######. . . . ##########. . . . ######. . . . . . . . . . . . . . . . . . . . . . ##  |_|   \___/  \___/  \__,_|         ##", 10
          byte "##                                                                                                                              ##                                     ##", 10
          byte "##. . . . . .######## . . . .######## . . . .######## . . . .######## . . . .######## . . . .######## . . . .######## . . . . . ##                _________________    ##", 10
          byte "##           ##    ##        ##    ##        ##    ##        ##    ##        ##    ##        ##    ##        ##    ##           ##               / _______________ \   ##", 10
          byte "##. . . . . .##    ## . . . .##    ## . . . .##    ## . . . .##    ## . . . .##    ## . . . .##    ## . . . .##    ## . . . . . ##              | (_______________) |  ##", 10
          byte "##           ##    ##        ##    ##        ##    ##        ##    ##        ##    ##        ##    ##        ##    ##           ##               \_________________/   ##", 10
          byte "##. . . . . .######## . . . .######## . . . .######## . . . .######## . . . .######## . . . .######## . . . .######## . . . . . ##                                     ##", 10
          byte "##                                                                                                                              #########################################", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ##                                     ##", 10
          byte "##           ########                        ########                        ########                        ########           ##        _____________________        ##", 10
          byte "##. . O . . ##. . .## . . . . . . . . . . . .## . . ##. . . . . . . . . . . ##. . .## . . . . . . . . . . . .## . . ##. . O . . ##      /  ___________________  \      ##", 10
          byte "##         ##      ##                        ##      ##                    ##      ##                        ##      ##         ##     / / _____  ____    ____ \ \     ##", 10
          byte "##. . . . ##. . . .## . . . . . . . . . . . .## . . . ##. . . . . . . . . ##. . . .## . . . . . . . . . . . .## . . . ##. . . . ##    | | | ____|/ ___|  / ___| | |    ##", 10
          byte "##       ##        ######                ######        ####################        ######                ######        ##       ##    | | |  _|  \___ \ | |     | |    ##", 10
          byte "##. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ##    | | | |___  ___) || |___  | |    ##", 10
          byte "##                                                                                                                              ##    | | |_____||____/  \____| | |    ##", 10
          byte "#########################################################################################################################################################################", 0

;::::::::::::::::::::::::::::|Game Pause

gamePause byte "################################################################################################################################", 10
          byte "##                     #                                                                                #                     ##", 10
          byte "##                    #                                                                                  #                    ##", 10
          byte "######################                                                                                    ######################", 10
          byte "##                  #                                                                                      #                  ##", 10
          byte "##                 #                                                                                        #                 ##", 10
          byte "###################                                                                                          ###################", 10
          byte "##               #                                                                                            #               ##", 10
          byte "##              #                                                                                              #              ##", 10
          byte "################                                                                                                ################", 10
          byte "##            #                                                                                                  #            ##", 10
          byte "##           #                                                                                                    #           ##", 10
          byte "#############                                                                                                      #############", 10
          byte "##         #                                                                                                        #         ##", 10
          byte "##        #                                                                                                          #        ##", 10
          byte "##########                                                                                                            ##########", 10
          byte "##      #                                                                                                              #      ##", 10
          byte "################################################################################################################################", 10
          byte "##                                                                                                                            ##", 10
          byte "##                            8 888888888o      .8.       8 8888      88    d888888o.   8 8888888888                          ##", 10
          byte "##                            8 8888    `88.   .888.      8 8888      88  .`8888:' `88. 8 8888                                ##", 10
          byte "##                            8 8888     `88  :88888.     8 8888      88  8.`8888.   Y8 8 8888                                ##", 10
          byte "##                            8 8888     ,88 . `88888.    8 8888      88  `8.`8888.     8 8888                                ##", 10
          byte "##                            8 8888.   ,88'.8. `88888.   8 8888      88   `8.`8888.    8 888888888888                        ##", 10
          byte "##                            8 888888888P'.8`8. `88888.  8 8888      88    `8.`8888.   8 8888                                ##", 10
          byte "##                            8 8888      .8' `8. `88888. 8 8888      88     `8.`8888.  8 8888                                ##", 10
          byte "##                            8 8888     .8'   `8. `88888.` 8888     ,8P 8b   `8.`8888. 8 8888                                ##", 10
          byte "##                            8 8888    .888888888. `88888. 8888   ,d8P  `8b.  ;8.`8888 8 8888                                ##", 10
          byte "##                            8 8888   .8'       `8. `88888. `Y88888P'    `Y8888P ,88P' 8 888888888888                        ##", 10
          byte "##                                                                                                                            ##", 10
          byte "################################################################################################################################", 10
          byte "##      #                                                                                                              #      ##", 10
          byte "##########                                                                                                            ##########", 10
          byte "##        #                                                                                                          #        ##", 10
          byte "##         #                                                                                                        #         ##", 10
          byte "#############                                                                                                      #############", 10
          byte "##           #                                                                                                    #           ##", 10
          byte "##            #                                                                                                  #            ##", 10
          byte "################                                                                                                ################", 10
          byte "##              #                                                                                              #              ##", 10
          byte "##               #                                                                                            #               ##", 10
          byte "###################                                                                                          ###################", 10
          byte "##                 #                                                                                        #                 ##", 10
          byte "##                  #                                                                                      #                  ##", 10
          byte "######################                                                                                    ######################", 10
          byte "##                    #                                                                                  #                    ##", 10
          byte "##                     #                                                                                #                     ##", 10
          byte "################################################################################################################################", 0
          
;::::::::::::::::::::::::::::|Game Won!

gameWon   byte "################################################################################################################################", 10
          byte "##                     #                                                                                #                     ##", 10
          byte "##                    #                                                                                  #                    ##", 10
          byte "######################                                                                                    ######################", 10
          byte "##                  #                                                                                      #                  ##", 10
          byte "##                 #                                                                                        #                 ##", 10
          byte "###################                                                                                          ###################", 10
          byte "##               #                                                                                            #               ##", 10
          byte "##              #                                                                                              #              ##", 10
          byte "################                                                                                                ################", 10
          byte "##            #                                                                                                  #            ##", 10
          byte "##           #                                                                                                    #           ##", 10
          byte "#############                                                                                                      #############", 10
          byte "##         #                                                                                                        #         ##", 10
          byte "##        #                                                                                                          #        ##", 10
          byte "##########                                                                                                            ##########", 10
          byte "##      #                                                                                                              #      ##", 10
          byte "################################################################################################################################", 10
          byte "##                                                                                                                            ##", 10
          byte "##                          `8.`888b                 ,8'    ,o888888o.      b.             8   8 8888                         ##", 10    
          byte "##                           `8.`888b               ,8'  . 8888     `88.    888o.          8   8 8888                         ##", 10    
          byte "##                            `8.`888b             ,8'  ,8 8888       `8b   Y88888o.       8   8 8888                         ##", 10    
          byte "##                             `8.`888b     .b    ,8'   88 8888        `8b  .`Y888888o.    8   8 8888                         ##", 10    
          byte "##                              `8.`888b    88b  ,8'    88 8888         88  8o. `Y888888o. 8   8 8888                         ##", 10    
          byte "##                               `8.`888b .`888b,8'     88 8888         88  8`Y8o. `Y88888o8   8 8888                         ##", 10    
          byte "##                                `8.`888b8.`8888'      88 8888        ,8P  8   `Y8o. `Y8888                                  ##", 10
          byte "##                                 `8.`888`8.`88'       `8 8888       ,8P   8      `Y8o. `Y8   8 8888                         ##", 10    
          byte "##                                  `8.`8' `8,`'         ` 8888     ,88'    8         `Y8o.`   8 8888                         ##", 10    
          byte "##                                   `8.`   `8'             `8888888P'      8            `Yo   8 8888                         ##", 10     
          byte "##                                                                                                                            ##", 10
          byte "################################################################################################################################", 10
          byte "##      #                                                                                                              #      ##", 10
          byte "##########                                                                                                            ##########", 10
          byte "##        #                                                                                                          #        ##", 10
          byte "##         #                                                                                                        #         ##", 10
          byte "#############                                                                                                      #############", 10
          byte "##           #                                                                                                    #           ##", 10
          byte "##            #                                                                                                  #            ##", 10
          byte "################                                                                                                ################", 10
          byte "##              #                                                                                              #              ##", 10
          byte "##               #                                                                                            #               ##", 10
          byte "###################                                                                                          ###################", 10
          byte "##                 #                                                                                        #                 ##", 10
          byte "##                  #                                                                                      #                  ##", 10
          byte "######################                                                                                    ######################", 10
          byte "##                    #                                                                                  #                    ##", 10
          byte "##                     #                                                                                #                     ##", 10
          byte "################################################################################################################################", 0

;::::::::::::::::::::::::::::|Game Lost!

gameLost  byte "################################################################################################################################", 10
          byte "##                     #                                                                                #                     ##", 10
          byte "##                    #                                                                                  #                    ##", 10
          byte "######################                                                                                    ######################", 10
          byte "##                  #                                                                                      #                  ##", 10
          byte "##                 #                                                                                        #                 ##", 10
          byte "###################                                                                                          ###################", 10
          byte "##               #                                                                                            #               ##", 10
          byte "##              #                                                                                              #              ##", 10
          byte "################                                                                                                ################", 10
          byte "##            #                                                                                                  #            ##", 10
          byte "##           #                                                                                                    #           ##", 10
          byte "#############                                                                                                      #############", 10
          byte "##         #                                                                                                        #         ##", 10
          byte "##        #                                                                                                          #        ##", 10
          byte "##########                                                                                                            ##########", 10
          byte "##      #                                                                                                              #      ##", 10
          byte "################################################################################################################################", 10
          byte "##                                                                                                                            ##", 10
          byte "##                         8 8888             ,o888888o.        d888888o.   8888888 8888888888  8 8888                        ##", 10 
          byte "##                         8 8888          . 8888     `88.    .`8888:' `88.       8 8888        8 8888                        ##", 10 
          byte "##                         8 8888         ,8 8888       `8b   8.`8888.   Y8       8 8888        8 8888                        ##", 10 
          byte "##                         8 8888         88 8888        `8b  `8.`8888.           8 8888        8 8888                        ##", 10 
          byte "##                         8 8888         88 8888         88   `8.`8888.          8 8888        8 8888                        ##", 10 
          byte "##                         8 8888         88 8888         88    `8.`8888.         8 8888        8 8888                        ##", 10 
          byte "##                         8 8888         88 8888        ,8P     `8.`8888.        8 8888                                      ##", 10 
          byte "##                         8 8888         `8 8888       ,8P  8b   `8.`8888.       8 8888        8 8888                        ##", 10 
          byte "##                         8 8888          ` 8888     ,88'   `8b.  ;8.`8888       8 8888        8 8888                        ##", 10 
          byte "##                         8 888888888888     `8888888P'      `Y8888P ,88P'       8 8888        8 8888                        ##", 10  
          byte "##                                                                                                                            ##", 10
          byte "################################################################################################################################", 10
          byte "##      #                                                                                                              #      ##", 10
          byte "##########                                                                                                            ##########", 10
          byte "##        #                                                                                                          #        ##", 10
          byte "##         #                                                                                                        #         ##", 10
          byte "#############                                                                                                      #############", 10
          byte "##           #                                                                                                    #           ##", 10
          byte "##            #                                                                                                  #            ##", 10
          byte "################                                                                                                ################", 10
          byte "##              #                                                                                              #              ##", 10
          byte "##               #                                                                                            #               ##", 10
          byte "###################                                                                                          ###################", 10
          byte "##                 #                                                                                        #                 ##", 10
          byte "##                  #                                                                                      #                  ##", 10
          byte "######################                                                                                    ######################", 10
          byte "##                    #                                                                                  #                    ##", 10
          byte "##                     #                                                                                #                     ##", 10
          byte "################################################################################################################################", 0

.code

;----------------------------|Function to set empty space color
setEmptyColor proc uses eax
    mov eax, black + (black * 16)
    call SetTextColor
    ret 0
setEmptyColor endp

;----------------------------|Function to set wall color
setWallColor proc uses eax
    mov eax, red + (red * 16)
    call SetTextColor
    ret 0
setWallColor endp

;----------------------------|Function to set food color
setFoodColor proc uses eax
    mov eax, gray + (black * 16)
    call SetTextColor
    ret 0
setFoodColor endp

;----------------------------|Function to set Pac Man color
setPMColor proc uses eax
    mov eax, yellow + (black * 16)
    call SetTextColor
    ret 0
setPMColor endp

setGhostColor proc uses eax
    mov eax, black + (magenta * 16)
    call SetTextColor
    ret 0
setGhostColor endp

;----------------------------|Function to set Menu color
setMenuColor proc uses eax
    mov eax, yellow + (black * 16)
    call SetTextColor
    ret 0
setMenuColor endp

;----------------------------|Function to reset print color
resetColor proc uses eax
    mov eax, white + (black * 16)
    call SetTextColor
    ret 0
resetColor endp

;----------------------------|Function to print a screen
printScreen proc
    push ebp
    mov ebp, esp
    mov esi, [ebp+8]         ;ESI points to the first row in passed array

row_loop:
    mov al, [esi]            ;load current character
    cmp al, 0
    je finish_screen         ;if null terminator, end of 2D array

    cmp al, 10
    je next_row              ;if 10 (newline), go to next row

    cmp al, '#'               
    je useWallColor
    cmp al, '.'               
    je useFoodColor
    cmp al, ' '
    je useEmptyColor
    
    jmp UseMenuColor

useWallColor:
    call setWallColor
    jmp useBlank

useFoodColor:
    call setFoodColor
    jmp print_char

useEmptyColor:
    call setEmptyColor
    jmp print_char

UseMenuColor:
    call setMenuColor
    jmp print_char

useBlank:
    mov al, ' '

print_char:
    call writechar           ;print character in AL
    inc esi                  ;next character
    jmp row_loop

next_row:
    call crlf                ;print newline after row
    inc esi                  ;move to next character after 10
    call resetColor
    jmp row_loop

finish_screen:
    call resetColor
    pop ebp
    ret 4                    ;clean up argument (1)
printScreen endp

;----------------------------|Function to display PacMan at his position
displayPacMan proc uses eax edx
    mov dl, pX
    mov dh, pY
    call gotoxy
    call setPMColor
    mov al, 'C'
    call writechar
    call resetColor
    ret
displayPacMan endp

;----------------------------|Function to display Ghost1 at his position
displayG1 proc uses eax edx
    mov dl, g1X
    mov dh, g1Y
    call gotoxy
    call setGhostColor
    mov al, 'G'
    call writechar
    call resetColor
    ret
displayG1 endp

;----------------------------|Function to display Ghost2 at his position
displayG2 proc uses eax edx
    mov dl, g2X
    mov dh, g2Y
    call gotoxy
    call setGhostColor
    mov al, 'H'
    call writechar
    call resetColor
    ret
displayG2 endp

;----------------------------|Function to display Ghost3 at his position
displayG3 proc uses eax edx
    mov dl, g3X
    mov dh, g3Y
    call gotoxy
    call setGhostColor
    mov al, 'O'
    call writechar
    call resetColor
    ret
displayG3 endp

;----------------------------|Function to display Ghost4 at his position
displayG4 proc uses eax edx
    mov dl, g4X
    mov dh, g4Y
    call gotoxy
    call setGhostColor
    mov al, 'S'
    call writechar
    call resetColor
    ret
displayG4 endp

;----------------------------|Function to display Ghost5 at his position
displayG5 proc uses eax edx
    mov dl, g5X
    mov dh, g5Y
    call gotoxy
    call setGhostColor
    mov al, 'T'
    call writechar
    call resetColor
    ret
displayG5 endp

;----------------------------|Function to set level variables such as PM and Ghosts positions with thier initial values
initLevel proc uses eax ecx
    local offsetX:byte
    local offsetY:byte

    mov offsetX, 1           ;offset to move cursor to the right as wall is 2 thick
    mov offsetY, 13          ;offset to lower cursor due to logo
    mov eax, currentLvl
    dec eax                  ;0-based index

    mov cl, byte ptr [lvlPx + eax*4]
    add cl, offsetX
    mov pX, cl
    mov cl, byte ptr [lvlPy + eax*4]
    add cl, offsetY
    mov pY, cl
    call displayPacMan

    mov cl, byte ptr [lvlG1x + eax*4]
    add cl, offsetX
    mov g1X, cl
    mov cl, byte ptr [lvlG1y + eax*4]
    add cl, offsetY
    mov g1Y, cl
    call displayG1

    mov cl, byte ptr [lvlG2x + eax*4]
    add cl, offsetX
    mov g2X, cl
    mov cl, byte ptr [lvlG2y + eax*4]
    add cl, offsetY
    mov g2Y, cl
    call displayG2
    
    mov cl, byte ptr [lvlG3x + eax*4]
    add cl, offsetX
    mov g3X, cl
    mov cl, byte ptr [lvlG3y + eax*4]
    add cl, offsetY
    mov g3Y, cl
    call displayG3
    
    mov cl, byte ptr [lvlG4x + eax*4]
    add cl, offsetX
    mov g4X, cl
    mov cl, byte ptr [lvlG4y + eax*4]
    add cl, offsetY
    mov g4Y, cl
    call displayG4

    mov cl, byte ptr [lvlG5x + eax*4]
    add cl, offsetX
    mov g5X, cl
    mov cl, byte ptr [lvlG5y + eax*4]
    add cl, offsetY
    mov g5Y, cl
    call displayG5

    ret
initLevel endp

;----------------------------|Check for keyboard input: returns direction in EAX: 0=none, 1=UP, 2=DOWN, 3=LEFT, 4=RIGHT
checkInput proc
    call Readkey            ; Check for key press
    jz no_key               ; If ZF=1, no key was pressed
    
                            ;Check arrow keys - scan codes are in AH
    cmp ah, 48h             ;UP arrow
    je up_pressed
    cmp ah, 50h             ;DOWN arrow
    je down_pressed
    cmp ah, 4Bh             ;LEFT arrow
    je left_pressed
    cmp ah, 4Dh             ;RIGHT arrow
    je right_pressed
    jmp no_key              ;Not an arrow key
    
up_pressed:
    mov direction, 1
    jmp exit_check
    
down_pressed:
    mov direction, 2
    jmp exit_check
    
left_pressed:
    mov direction, 3
    jmp exit_check
    
right_pressed:
    mov direction, 4
    jmp exit_check
    
no_key:
    mov direction, 0
    
exit_check:
    ret
checkInput endp

;----------------------------|Move Pacman in the specified direction: 1=UP, 2=DOWN, 3=LEFT, 4=RIGHT
movePacMan proc
    local testX: byte

    push ebp
    mov ebp, esp
    push eax
    push ebx
    push ecx
    push edx
    push esi
    
                              ;Get current level screen address
    mov esi, offset lvl1
    mov eax, currentLvl
    cmp eax, 2
    jne check_level3
    mov esi, offset lvl2
    jmp got_level
check_level3:
    cmp eax, 3
    jne got_level
    mov esi, offset lvl3
got_level:

    mov dl, pX                ;Store initial position
    mov dh, pY

    cmp direction, 1          ;Calculate potential new position
    je try_up
    cmp direction, 2
    je try_down
    cmp direction, 3
    je try_left
    cmp direction, 4
    je try_right
    jmp exit_move
    
try_up:
    dec dh
    jmp check_wall
    
try_down:
    inc dh
    jmp check_wall
    
try_left:
    sub dl, 2
    jmp check_wall
    
try_right:
    add dl, 2
    
check_wall:
    mov testX, dl             ;Save the potential position temporarily
    
    ;Calculate index in level string for the POTENTIAL position
    ;Index = (Y) * (169+1) + X
    mov eax, 0
    mov al, dh                ;Use dh which contains potential Y
    
    mov ecx, 170              ;130 chars per row + 1 for newline
    mul ecx                   ;EAX = (Y) * 170
    
    mov dl, testX             ;Use testX which contains potential X
                              ;Use dl which contains potential X
    movzx ecx, dl             ;ECX = potential X position
    add eax, ecx              ;EAX = (Y)*170 + X
    
    ;Check for a wall at the calculated position
    mov bl, byte ptr [esi + eax]
    cmp bl, '#'
    je exit_move              ;If wall, don't move

    ; Check if the new position has a bonus fruit
    cmp bl, '@'
    jne check_regular_dot     ;If not a bonus fruit, check if it's a regular dot

    ; push offset chompSound
    ; call playSound
    
    ; Replace bonus fruit with space in the level data
    mov byte ptr [esi + eax], ' '
    
    ; Increase score by 500 points
    add score, 500
    call updateSidebarScore
    
    ; Decrement food count
    mov eax, currentLvl
    dec eax                   ;0-based index
    dec dword ptr [lvlFC + eax*4]
    call updateSidebarFood
    jmp skip_dot_collection   ;Skip regular dot collection after handling bonus fruit

check_regular_dot:
    ; Check if the new position has a dot
    cmp bl, '.'
    jne skip_dot_collection   ;If not a dot, skip collection logic
    
    ; Replace dot with space in the level data
    mov byte ptr [esi + eax], ' '

    ; push offset chompSound
    ; call playSound
    
    ; Increase score by 10 points
    add score, 10
    call updateSidebarScore
    
    ; Decrement food count
    mov eax, currentLvl
    dec eax                   ;0-based index
    dec dword ptr [lvlFC + eax*4]
    call updateSidebarFood
    
    ; Check if all food is collected
    mov eax, currentLvl
    dec eax
    cmp dword ptr [lvlFC + eax*4], 0
    jne skip_dot_collection
    
    ; Level complete - advance to next level
    inc currentLvl
    cmp currentLvl, 4            ;Check if completed all levels
    jge won                      ;All levels complete, game won
    
    ; Load next level
    call clrscr
    push offset lvl1
    mov eax, currentLvl
    cmp eax, 2
    jne check_next_lvl3
    pop edx
    push offset lvl2
    jmp display_next_level       ;CHANGED LABEL HERE
    check_next_lvl3:
    pop edx
    push offset lvl3
    display_next_level:          ;RENAMED THIS LABEL
        call printScreen
        call initLevel
        call updateSidebarScore
        call updateSidebarLives
        call updateSidebarFood
        jmp exit_move
    won:
        ; call savePlayerData
        call clrscr              ;Clear the screen
        push offset gameWon      ;Display the "Game Won" screen
        call printScreen
        call displayFinalScore
        call WaitForKey          ;Wait for any key press
        exit                     ;Exit the program

skip_dot_collection:
    ; Recalculate position after dot check - need to reload testX into dl
    mov dl, testX
    
    ;Valid move - erase current position
    mov dl, pX
    mov dh, pY
    call gotoxy
    call setEmptyColor
    mov al, ' '
    call writechar

    cmp direction, 1
    je move_up
    cmp direction, 2
    je move_down
    cmp direction, 3
    je move_left
    cmp direction, 4
    je move_right
    jmp exit_move
    
move_up:
    dec pY
    jmp finish_move
    
move_down:
    inc pY
    jmp finish_move
    
move_left:
    sub pX, 2
    jmp finish_move
    
move_right:
    add pX, 2
    
finish_move:
    call displayPacMan
    
    ; Add teleport check here
    movzx eax, pX    ; Zero-extend the byte to a 32-bit value in eax, ; Save original position before checking
    push eax         ; Now push the 32-bit value
    movzx eax, pY    ; Zero-extend the byte to a 32-bit value in eax
    push eax         ; Push the 32-bit value
    call checkTeleport
    pop edx          ; Clean up stack
    pop edx
    
exit_move:
    pop esi
    pop edx
    pop ecx
    pop ebx
    pop eax
    pop ebp
    ret                      ;Clean up parameter (4 bytes)
movePacMan endp

;----------------------------|Update Score in Sidebar
updateSidebarScore proc uses eax edx
    mov dl, scoreDisplayX
    mov dh, scoreDisplayY
    call gotoxy
    call setMenuColor
    mov eax, score
    call writedec
    call resetColor
    ret
updateSidebarScore endp

;----------------------------|Update Food Count in Sidebar
updateSidebarFood proc uses eax edx
    mov dl, foodDisplayX
    mov dh, foodDisplayY
    call gotoxy
    call setMenuColor
    mov edx, offset foodValDisplayBuffer
    call writestring
    
    mov dl, foodDisplayX
    mov dh, foodDisplayY
    call gotoxy
    mov eax, currentLvl
    dec eax
    mov eax, dword ptr [lvlFC + eax*4]
    
    call writedec
    call resetColor
    ret
updateSidebarFood endp

;----------------------------|Update Lives (Hearts) in Sidebar
updateSidebarLives proc uses eax edx
    mov dl, livesDisplayX    ;X position for lives (adjust as needed)
    mov dh, livesDisplayY    ;Y position for lives (adjust as needed)
    call gotoxy
    call setMenuColor
    movzx eax, lives
    cmp eax, 3
    je show3
    cmp eax, 2
    je show2
    cmp eax, 1
    je show1
    jmp show0

show3:
    mov edx, offset heartStr3
    call writestring
    jmp doneHearts
show2:
    mov edx, offset heartStr2
    call writestring
    jmp doneHearts
show1:
    mov edx, offset heartStr1
    call writestring
    jmp doneHearts
show0:
    mov edx, offset heartStr0
    call writestring
doneHearts:
    call resetColor
    ret
updateSidebarLives endp

;----------------------------|Check PacMan-Ghost Collision
isDead proc
    ; Compare PacMan's position with each ghost's position
    mov al, pX
    mov bl, pY

    ; Ghost 1
    cmp al, g1X
    jne check_g2
    cmp bl, g1Y
    je dead

check_g2:
    cmp al, g2X
    jne check_g3
    cmp bl, g2Y
    je dead

check_g3:
    cmp al, g3X
    jne check_g4
    cmp bl, g3Y
    je dead

check_g4:
    cmp al, g4X
    jne check_g5
    cmp bl, g4Y
    je dead

check_g5:
    cmp al, g5X
    jne not_dead
    cmp bl, g5Y
    je dead

not_dead:
    mov eax, 0      ; Not dead
    ret

dead:
    mov eax, 1      ; Dead
    ret
isDead endp

;----------------------------|Respawn PacMan at Initial Position
respawnPacMan proc uses eax ebx ecx edx
    local offsetX:byte
    local offsetY:byte
    local deadX:byte
    local deadY:byte
    
    ; Save death position
    mov dl, pX
    mov deadX, dl
    mov dl, pY
    mov deadY, dl
    
    ; Calculate new position
    mov offsetX, 1
    mov offsetY, 13
    mov eax, currentLvl
    dec eax
    
    mov cl, byte ptr [lvlPx + eax*4]
    add cl, offsetX
    mov pX, cl
    mov cl, byte ptr [lvlPy + eax*4]
    add cl, offsetY
    mov pY, cl
    
    ; Redraw the ghost at the death position
    mov dl, deadX
    mov dh, deadY
    call gotoxy
    
    ; Check which ghost was at this position
    mov al, g1X
    mov bl, g1Y
    cmp al, deadX
    jne check_g2_redraw
    cmp bl, deadY
    jne check_g2_redraw
    call displayG1
    jmp draw_pacman
    
check_g2_redraw:
    mov al, g2X
    mov bl, g2Y
    cmp al, deadX
    jne check_g3_redraw
    cmp bl, deadY
    jne check_g3_redraw
    call displayG2
    jmp draw_pacman
    
check_g3_redraw:
    mov al, g3X
    mov bl, g3Y
    cmp al, deadX
    jne check_g4_redraw
    cmp bl, deadY
    jne check_g4_redraw
    call displayG3
    jmp draw_pacman
    
check_g4_redraw:
    mov al, g4X
    mov bl, g4Y
    cmp al, deadX
    jne check_g5_redraw
    cmp bl, deadY
    jne check_g5_redraw
    call displayG4
    jmp draw_pacman

check_g5_redraw:
    mov al, g5X
    mov bl, g5Y
    cmp al, deadX
    jne draw_pacman
    cmp bl, deadY
    jne draw_pacman
    call displayG5

    
draw_pacman:
    ; Display PacMan at new position
    call displayPacMan
    ret
respawnPacMan endp

; ;----------------------------|Move a ghost with simple random movement
; simpleMoveGhost proc uses eax ebx ecx edx esi
;     ; Parameters:
;     ; EBX = ghost X pointer
;     ; ECX = ghost Y pointer
    
;     local testX:byte
;     local testY:byte
;     local rndDir:byte
    
;     ; Get current level screen address
;     mov esi, offset lvl1
;     mov eax, currentLvl
;     cmp eax, 2
;     jne smg_check_level3
;     mov esi, offset lvl2
;     jmp smg_got_level
; smg_check_level3:
;     cmp eax, 3
;     jne smg_got_level
;     mov esi, offset lvl3
; smg_got_level:
    
;     ; Store initial position
;     mov al, [ebx]  ; Ghost X
;     mov testX, al
;     mov al, [ecx]  ; Ghost Y
;     mov testY, al
    
;     ; Choose a random direction (1-4)
;     call Random32
;     and eax, 03h   ; 0-3
;     mov rndDir, al
    
;     ; Apply direction: 1=UP, 2=DOWN, 3=LEFT, 4=RIGHT
;     cmp rndDir, 0
;     je smg_try_up
;     cmp rndDir, 1
;     je smg_try_down
;     cmp rndDir, 2
;     je smg_try_left
;     cmp rndDir, 3
;     je smg_try_right
;     jmp smg_exit   ; Shouldn't happen

; smg_try_up:
;     ; Try moving up
;     mov al, testY
;     dec al
;     mov testY, al
;     jmp smg_check_wall
    
; smg_try_down:
;     ; Try moving down
;     mov al, testY
;     inc al
;     mov testY, al
;     jmp smg_check_wall
    
; smg_try_left:
;     ; Try moving left
;     mov al, testX
;     sub al, 2
;     mov testX, al
;     jmp smg_check_wall
    
; smg_try_right:
;     ; Try moving right
;     mov al, testX
;     add al, 2
;     mov testX, al
    
; smg_check_wall:
;     ; Calculate index in level string for potential position
;     ; Index = (Y) * 170 + X
;     movzx eax, testY
;     mov edx, 170
;     mul edx
;     movzx edx, testX
;     add eax, edx
    
;     ; Check for a wall at the calculated position
;     mov bl, byte ptr [esi + eax]
;     cmp bl, '#'
;     je smg_exit  ; Wall detected, don't move
    
;     ; Valid move - erase current position
;     push ebx       ; Save ghost X pointer
;     push ecx       ; Save ghost Y pointer
    
;     mov dl, [ebx]  ; Current ghost X
;     mov dh, [ecx]  ; Current ghost Y
;     call gotoxy
;     call setEmptyColor
;     mov al, ' '
;     call writechar
    
;     ; Update ghost position
;     pop ecx        ; Restore ghost Y pointer
;     pop ebx        ; Restore ghost X pointer
    
;     ; Update ghost position
;     mov al, testX
;     mov [ebx], al  ; Update X
;     mov al, testY
;     mov [ecx], al  ; Update Y
    
; smg_exit:
;     ret
; simpleMoveGhost endp

; ;----------------------------|Move a ghost toward the player
; complexMoveGhost proc uses eax ebx ecx edx esi
;     ; Parameters
;     ; EBX = ghost X pointer
;     ; ECX = ghost Y pointer
    
;     local testX:byte
;     local testY:byte
;     local moveDir:byte
    
;     ; Get current level screen address
;     mov esi, offset lvl1
;     mov eax, currentLvl
;     cmp eax, 2
;     jne cmg_check_level3
;     mov esi, offset lvl2
;     jmp cmg_got_level
; cmg_check_level3:
;     cmp eax, 3
;     jne cmg_got_level
;     mov esi, offset lvl3
; cmg_got_level:
    
;     ; Store initial position
;     mov al, [ebx]  ; Ghost X
;     mov testX, al
;     mov al, [ecx]  ; Ghost Y
;     mov testY, al
    
;     ; Decide direction based on player's position
;     mov al, testX
;     cmp al, pX
;     jg cmg_try_left   ; Ghost is to right of player, try left
;     jl cmg_try_right  ; Ghost is to left of player, try right
    
;     ; If X positions match, try vertical
;     mov al, testY
;     cmp al, pY
;     jg cmg_try_up     ; Ghost is below player, try up
;     jl cmg_try_down   ; Ghost is above player, try down
    
;     ; If both X and Y match (unlikely), pick random
;     call Random32
;     and eax, 03h
;     mov moveDir, al
;     jmp cmg_apply_direction
    
; cmg_try_up:
;     mov moveDir, 0
;     jmp cmg_apply_direction
    
; cmg_try_down:
;     mov moveDir, 1
;     jmp cmg_apply_direction
    
; cmg_try_left:
;     mov moveDir, 2
;     jmp cmg_apply_direction
    
; cmg_try_right:
;     mov moveDir, 3
    
; cmg_apply_direction:
;     ; Apply move direction
;     cmp moveDir, 0
;     je cmg_move_up
;     cmp moveDir, 1
;     je cmg_move_down
;     cmp moveDir, 2
;     je cmg_move_left
;     cmp moveDir, 3
;     je cmg_move_right
;     jmp cmg_exit  ; Shouldn't happen
    
; cmg_move_up:
;     ; Try moving up
;     mov al, testY
;     dec al
;     mov testY, al
;     jmp cmg_check_wall
    
; cmg_move_down:
;     ; Try moving down
;     mov al, testY
;     inc al
;     mov testY, al
;     jmp cmg_check_wall
    
; cmg_move_left:
;     ; Try moving left
;     mov al, testX
;     sub al, 2
;     mov testX, al
;     jmp cmg_check_wall
    
; cmg_move_right:
;     ; Try moving right
;     mov al, testX
;     add al, 2
;     mov testX, al
    
; cmg_check_wall:
;     ; Calculate index in level string for potential position
;     ; Index = (Y) * 170 + X
;     movzx eax, testY
;     mov edx, 170
;     mul edx
;     movzx edx, testX
;     add eax, edx
    
;     ; Check for a wall at the calculated position
;     mov bl, byte ptr [esi + eax]
;     cmp bl, '#'
;     je cmg_exit  ; Wall detected, don't move
    
;     ; Valid move - erase current position
;     push ebx       ; Save ghost X pointer
;     push ecx       ; Save ghost Y pointer
    
;     mov dl, [ebx]  ; Current ghost X
;     mov dh, [ecx]  ; Current ghost Y
;     call gotoxy
;     call setEmptyColor
;     mov al, ' '
;     call writechar
    
;     ; Update ghost position
;     pop ecx        ; Restore ghost Y pointer
;     pop ebx        ; Restore ghost X pointer
    
;     ; Update ghost position
;     mov al, testX
;     mov [ebx], al  ; Update X
;     mov al, testY
;     mov [ecx], al  ; Update Y
    
; cmg_exit:
;     ret
; complexMoveGhost endp

;----------------------------|Display Final Score
displayFinalScore proc uses eax edx
    ; Position cursor for the score display
    mov dl, 20               ; Center horizontally (adjust as needed)
    mov dh, 76               ; Position below game won/lost screen
    call gotoxy
    
    ; Display player name
    call setMenuColor
    mov edx, offset playerName
    call crlf
    call writestring
    
    ; Display "'s Final Score: "
    mov edx, offset finalScoreMsg
    call writestring
    
    ; Display the score value
    mov eax, score
    call writedec
    
    call resetColor
    ret
displayFinalScore endp

;----------------------------|Check if PacMan is on a teleport point and handle teleportation
checkTeleport proc uses eax ebx ecx edx
    ; Only check teleports in Level 3
    mov eax, currentLvl
    cmp eax, 3
    jne exit_teleport
    
    ; Check if PacMan is on any teleport point
    ; Teleport point locations (adjusted -1 for both X and Y):
    ; 1: Row 18, Column 6
    ; 2: Row 18, Column 122
    ; 3: Row 54, Column 6
    ; 4: Row 54, Column 122
    
    ; Check Teleport Point 1
    cmp pX, 6
    jne check_teleport2
    cmp pY, 18
    jne check_teleport2
    
    ; Teleport from Point 1 to above Point 3 (Row 52, Column 6)
    mov pX, 6
    mov pY, 52
    jmp do_teleport
    
check_teleport2:
    ; Check Teleport Point 2
    cmp pX, 122
    jne check_teleport3
    cmp pY, 18
    jne check_teleport3
    
    ; Teleport from Point 2 to above Point 4 (Row 52, Column 122)
    mov pX, 122
    mov pY, 52
    jmp do_teleport
    
check_teleport3:
    ; Check Teleport Point 3
    cmp pX, 6
    jne check_teleport4
    cmp pY, 54
    jne check_teleport4
    
    ; Teleport from Point 3 to above Point 1 (Row 16, Column 6)
    mov pX, 6
    mov pY, 16
    jmp do_teleport
    
check_teleport4:
    ; Check Teleport Point 4
    cmp pX, 122
    jne exit_teleport
    cmp pY, 54
    jne exit_teleport
    
    ; Teleport from Point 4 to above Point 2 (Row 16, Column 122)
    mov pX, 122
    mov pY, 16
    
do_teleport:
    ; push offset eatGhostSound
    ; call playSound

    ; Draw PacMan at new location
    mov dl, pX
    mov dh, pY
    call gotoxy
    call setPMColor
    mov al, 'C'
    call writechar
    
    ; Redraw the teleport point at the previous location
    ; Fix: Access parameters correctly accounting for saved registers
    ; The stack layout is: [saved registers][return addr][originalY][originalX]
    ; Each register is 4 bytes, plus 4 bytes for return address
    mov dl, byte ptr [esp+24]  ; Original X (4 regs * 4 bytes + 4 bytes return addr + 4 bytes)
    mov dh, byte ptr [esp+20]  ; Original Y (4 regs * 4 bytes + 4 bytes return addr)
    call gotoxy
    
    call setMenuColor
    mov al, 'O'      ; Redraw the teleport point
    call writechar
    
    call resetColor
    mov eax, 1       ; Return 1 to indicate teleport occurred
    ret
    
exit_teleport:
    mov eax, 0       ; Return 0 to indicate no teleport
    ret
checkTeleport endp

;::::::::::::::::::::::::::::|Main
main proc
    call clrscr              ;clearing the screen
    push offset gameName     ;displaying the logo
    call printScreen         ;calling the function to print the logo
    call WaitForKey

ShowMenu:
    call clrscr              ;Clear screen before showing menu
    push offset gameMenu     ;Display the menu
    call printScreen
    
MenuLoop:
    call Readkey             ;Wait for key press
    jz MenuLoop              ;If no key pressed, wait again
    
                             ;Check for numeric keys 1-5
    cmp al, '1'              ;Start option
    je StartGame
    cmp al, '2'              ;Guide option
    je ShowGuide
    cmp al, '3'              ;Setup option
    je ShowSetup
    cmp al, '4'              ;History option (placeholder)
    je ShowHistory
    cmp al, '5'              ;Quit option
    je QuitGame
    
    jmp MenuLoop             ;If another key was pressed, wait again
    
StartGame:
    call clrscr
    call getPlayerName       ;Get player name from input

    ; push offset beginningSound
    ; call playSound

    call clrscr              ;Clear screen
    push offset lvl1         ;Display level 1
    call printScreen
    mov currentLvl, 1        ;Set current level
    call initLevel           ;Initialize level variables

    call updateSidebarScore
    call updateSidebarLives
    call updateSidebarFood

    jmp GameLoop             ;Start the game
    
ShowGuide:
    call clrscr              ;Clear screen
    push offset gameInst     ;Display game instructions
    call printScreen
    
    call WaitForKey
    jmp ShowMenu
    
ShowSetup:
    call clrscr              ;Clear screen
    push offset gameSetup    ;Display setup screen
    call printScreen
    
    call WaitForKey          ;Wait for any key to return to menu
    jmp ShowMenu
    
ShowHistory:
    call clrscr              ;Clear screen
    push offset gamePause    ;Display pause screen as placeholder for history
    call printScreen
    
                             ;Wait for any key to return to menu
    call WaitForKey
    jmp ShowMenu
    
QuitGame:
    ; call savePlayerData
    call clrscr              ;Clear screen
    push offset gameLost     ;Display game lost screen
    call printScreen
    call displayFinalScore
                             ;Wait for any key before exit
    call WaitForKey
    jmp ExitProgram

GameLoop:
    mov eax, 50              ; Base delay value (50ms)
    mov edx, 0               ; Clear EDX for division (instead of cdq)
    mov ebx, currentLvl      ; Get current level number
    div ebx                  ; Divide base delay by level number (EAX = 50/currentLvl)
    call delay               ; Apply calculated delay

    call checkInput          ;Check for input, returns direction in EAX

    cmp ah, 01h              ;Escape key scan code
    je ShowMenu

    cmp al, 'p'              ;Pause key
    je show_pause
    
    jmp check_direction      ;No special keys, continue normal flow

show_pause:
    ; Save current game state registers if needed
    push eax
    push edx
    
    ; Show pause screen
    call clrscr
    push offset gamePause
    call printScreen
    
    ; Wait for any key to unpause
    call WaitForKey
    
    ; Restore game screen based on current level
    call clrscr
    
    ; Determine which level to redraw
    mov eax, currentLvl
    cmp eax, 1
    jne pause_check_lvl2
    push offset lvl1
    jmp pause_redraw_screen
    
pause_check_lvl2:
    cmp eax, 2
    jne pause_check_lvl3
    push offset lvl2
    jmp pause_redraw_screen
    
pause_check_lvl3:
    push offset lvl3
    
pause_redraw_screen:
    call printScreen
    call displayPacMan     ; Redraw game elements
    call displayG1
    call displayG2
    call displayG3
    call displayG4
    call displayG5
    
    ; Update sidebar info
    call updateSidebarScore
    call updateSidebarLives
    call updateSidebarFood
    
    pop edx
    pop eax
    
check_direction:
    cmp direction, 0         ;If no movement input detected
    je continue_loop

    call movePacMan    

;     ; Ghost movement
;     inc ghostMoveCounter
;     cmp ghostMoveCounter, 5   ; Adjust speed - higher number = slower ghosts
;     jl skip_ghost_movement
    
;     mov ghostMoveCounter, 0
    
;     ; Check current level and use appropriate movement function
;     mov eax, currentLvl
;     cmp eax, 1
;     jne use_complex_movement
    
;     ; Level 1 - Use simple movement
;     lea ebx, g1X
;     lea ecx, g1Y
;     call simpleMoveGhost
;     call displayG1
    
;     lea ebx, g2X
;     lea ecx, g2Y
;     call simpleMoveGhost
;     call displayG2
    
;     lea ebx, g3X
;     lea ecx, g3Y
;     call simpleMoveGhost
;     call displayG3
    
;     lea ebx, g4X
;     lea ecx, g4Y
;     call simpleMoveGhost
;     call displayG4
    
;     lea ebx, g5X
;     lea ecx, g5Y
;     call simpleMoveGhost
;     call displayG5
;     jmp ghost_movement_done
    
; use_complex_movement:
;     ; Levels 2-3 - Use complex movement
;     lea ebx, g1X
;     lea ecx, g1Y
;     call complexMoveGhost
;     call displayG1
    
;     lea ebx, g2X
;     lea ecx, g2Y
;     call complexMoveGhost
;     call displayG2
    
;     lea ebx, g3X
;     lea ecx, g3Y
;     call complexMoveGhost
;     call displayG3
    
;     lea ebx, g4X
;     lea ecx, g4Y
;     call complexMoveGhost
;     call displayG4
    
;     lea ebx, g5X
;     lea ecx, g5Y
;     call complexMoveGhost
;     call displayG5
    
; ghost_movement_done:
;     ; Check for collisions after ghosts moved
;     call isDead
;     cmp eax, 1save
;     jne skip_ghost_movement
    
;     ; PacMan died from ghost movement
;     dec lives
;     call updateSidebarLives
;     call respawnPacMan
    
;     ; Check for game over
;     cmp lives, 0
;     jg skip_ghost_movement
;     jmp QuitGame
    
; skip_ghost_movement:

    ; --- Collision and life system ---
    call isDead
    cmp eax, 1
    jne continue_loop

    ; PacMan died: lose a life, update sidebar, respawn
    dec lives
    call updateSidebarLives

    ; push offset deathSound
    ; call playSound

    call respawnPacMan

    ; Optional: check for game over
    cmp lives, 0
    jg continue_loop
    jmp QuitGame
    
continue_loop:
    jmp GameLoop

ExitProgram:
    exit
main endp

;----------------------------|Play a sound file
; playSound proc uses eax, soundFilePtr:ptr byte
;     invoke PlaySoundA, soundFilePtr, NULL, SND_FILENAME or SND_ASYNC
;     ret
; playSound endp

;----------------------------|Get player name from input
getPlayerName proc uses eax ecx edx edi
    call clrscr              ; Clear the screen

    ; Set cursor position for name prompt
    mov dl, nameInputX
    mov dh, nameInputY
    call gotoxy
    
    ; Display prompt
    call setMenuColor
    mov edx, offset nameInputPrompt
    call writestring
    call resetColor
    
    ; Clear name buffer
    mov nameLength, 0
    mov ecx, 32
    mov edi, offset playerName
    mov al, 0
    rep stosb               ; Clear player name buffer
    
    ; Set up for name input
    mov edi, offset playerName
    
inputLoop:
    ; Get character input
    call ReadChar           
    
    ; Check for Enter key (end of input)
    cmp al, 13              ; ASCII for Enter
    je exitNameInput
    
    ; Check if name is too long
    movzx ecx, nameLength
    cmp cl, maxNameLength
    jae inputLoop          ; Ignore input if name is at max length
    
    ; Store character in buffer
    mov [edi], al
    inc edi
    inc nameLength
    
    ; Display the character
    call setPMColor
    call writechar         ; Display the character 
    call resetColor
    
    jmp inputLoop

exitNameInput:
    ; Null-terminate the string
    mov byte ptr [edi], 0
    ret
getPlayerName endp

;----------------------------|Helper function to wait for a key press
WaitForKey proc
    push eax
WaitKey:
    call Readkey
    jz WaitKey
    pop eax
    ret
WaitForKey endp

;::::::::::::::::::::::::::::|File Handling Variables
fileHandle DWORD ?
fileNameStr byte "score.txt", 0
fileBuffer byte 512 DUP(0)

;----------------------------|Save player data to file
savePlayerData proc
    ; Create or open the file
    mov edx, OFFSET fileNameStr
    call CreateOutputFile
    mov fileHandle, eax
   
fileOpened:
    ; Format the data: Name,Score,Level
    mov esi, OFFSET playerName
    mov edi, OFFSET fileBuffer
    
    ; Copy player name
    copyNameLoop:
        mov al, [esi]
        cmp al, 0
        je nameCopyDone
        mov [edi], al
        inc esi
        inc edi
        jmp copyNameLoop
    
    nameCopyDone:
    ; Add a comma
    mov BYTE PTR [edi], ','
    inc edi
    
    ; Convert score to string in buffer
    push edi                ; Save buffer position
    mov eax, score
    call ConvertIntToStr    ; Custom procedure needed
    pop edi                 ; Restore position
    add edi, eax            ; Advance buffer pointer by length of string written
    
    ; Add another comma
    mov BYTE PTR [edi], ','
    inc edi
    
    ; Add level
    push edi
    mov eax, currentLvl
    call ConvertIntToStr    ; Convert level to string
    pop edi
    add edi, eax            ; Advance buffer pointer by length of string written
    
    ; Add newline
    mov BYTE PTR [edi], 13
    inc edi
    mov BYTE PTR [edi], 10
    inc edi
    
    ; Calculate buffer length
    mov eax, edi
    sub eax, OFFSET fileBuffer
    
    ; Write to file
    mov ecx, eax
    mov edx, OFFSET fileBuffer
    mov ebx, fileHandle
    call WriteToFile
    
    ; Close the file
    mov eax, fileHandle
    call CloseFile
    
    ret
savePlayerData endp

;----------------------------|Function to convert int to string
; Input:
;   EAX - Integer to convert (assumed positive)
;   EDI - Pointer to destination buffer
; Output:
;   EAX - Length of the string written
;   Buffer at EDI contains the ASCII string
ConvertIntToStr proc uses ebx ecx edx esi
    local tempBuf[12]:byte   ; Temporary buffer to hold digits
    local digitCount:dword   ; Counter for number of digits
    
    mov digitCount, 0
    lea esi, tempBuf         ; ESI points to temp buffer
    
    ; Handle special case of zero
    cmp eax, 0
    jne start_conversion
    mov byte ptr [esi], '0'  ; Store '0'
    inc esi
    inc digitCount
    jmp finish_conversion
    
start_conversion:
    ; Convert the number by repeatedly dividing by 10
digit_loop:
    cmp eax, 0
    je finish_conversion
    
    ; Divide by 10, remainder is the current digit
    mov edx, 0               ; Clear EDX for division
    mov ebx, 10
    div ebx                  ; EAX = quotient, EDX = remainder
    
    ; Convert remainder to ASCII and store in temp buffer
    add dl, '0'              ; Convert to ASCII
    mov [esi], dl            ; Store in buffer
    inc esi
    inc digitCount
    
    ; Continue with the quotient
    jmp digit_loop
    
finish_conversion:
    ; Now we need to reverse the digits (they're currently in reverse order)
    dec esi                  ; Point to last character
    mov ecx, digitCount      ; Number of characters to copy
    
copy_loop:
    mov al, [esi]            ; Get character from temp buffer
    mov [edi], al            ; Store in destination buffer
    inc edi
    dec esi
    loop copy_loop
    
    ; Return string length in EAX
    mov eax, digitCount
    ret
ConvertIntToStr endp

end main